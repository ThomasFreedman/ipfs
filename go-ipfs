#!/bin/bash

# This script will install IPFS software and establish initial settings.
# This must be executed with root privileges or with sudo.

if [[ $(id -u) -ne 0 ]] ; then echo "Please run as root, or prefix with 'sudo'" ; exit 1 ; fi

WAIT=0                               # Set to 1 to wait fo confirmation to continue each step
DISTUP=0                             # Set to 1 to do a dist-upgrade
GOVER=1.10                           # Go language version to install
CONFIG=/home/ipfs/.ipfs/config       # IPFS configuration file

if [ "$1" != "" ]; then              # Was a command line parameter provided?
  if ! [ -z "${1//[0-9]}" ]          # Yes. Was it a positive number?
  then                               # No. Print error and exit
    echo "Please enter a positive integer for StorageMax parameter (gigabytes)"
    exit 1
  else                               # Command line parameter overrides default storageMax
    STORAGE_MAX="$1G"
  fi
else                                 # No command line parameter, so calculate storageMax
  FREE=`df --output=avail -B 1 / | tail -n 1` # Free space in bytes on root partition
  MAX=`expr $FREE / 1320000000`      # Approximately 75% of free space (in GB)
  printf -v STORAGE_MAX %dG $MAX     # Format the StorageMax parameter value
fi

if [ ! -f ready4ipfs ]; then
  # Make sure the system is fully updated and configured for network access
  echo ""
  echo "The system must be configured, at least to setup networking."
  echo "REBOOT if raspi-config asks, then run this again when rebooted."
  echo "You can just exit raspi-config the second time, don't reboot."
  read -n 1 -p "Press any key to launch the raspi-config utility..." key
  raspi-config
  echo "Updating the OS (Operating System)..."
  apt-get -y update
  apt-get -y upgrade
  touch ready4ipfs
  if [ $DISTUP == 1 ]; then
    echo ""
    echo "Performing a distribution upgrade, which may bump OS / kernel version..."
    apt-get -y dist-upgrade
    echo ""
    echo "Need to reboot. Afterwards, rerun this script to finish IPFS installation."
    read -n 1 -p "Press ^C to abort, or any other key to reboot..." key
    reboot
  fi
fi

if [ ! -d /home/ipfs ]; then
  echo "Creating the ipfs user account..."
  useradd -m -s /bin/bash ipfs
  mkdir /home/ipfs/go
  mkdir /home/ipfs/.ipfs
  chown -R ipfs.ipfs /home/ipfs
  echo "source /usr/local/bin/goInit" >> /home/ipfs/.profile  # Sets PATH and GOPATH
  echo ""
  if [ $WAIT == 1 ]; then read -n 1 -p "Press ^C to exit, any other key to proceed..." key; fi
fi

if [ ! -e /usr/local/bin/go$GOVER.linux-armv6l.tar.gz ]; then
  pushd /usr/local/bin
  echo "Installing binary golang version $GOVER from googleapis. Patience is required..."
  # Using the source: https://dist.ipfs.io/go-ipfs/v0.4.19/go-ipfs_v0.4.19_linux-arm64.tar.gz
  # is much faster than go, however it is only a specific version, whereas go approach will
  # get latest version. Question is, do we trust google to deliver a clean version??
  wget https://storage.googleapis.com/golang/go$GOVER.linux-armv6l.tar.gz
  tar -C /usr/local -xzf go$GOVER.linux-armv6l.tar.gz
  mkdir /root/go
  echo 'export GOPATH=/home/$USER/go' >> /usr/local/bin/goInit
  echo 'export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin' >> /usr/local/bin/goInit

  echo "export GOPATH=/root/go" >> /root/.profile
  echo "export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin" >> /root/.profile
  source /root/.profile
  go version
  popd
  echo ""
  if [ $WAIT == 1 ]; then read -n 1 -p "Press ^C to exit, any other key to proceed..." key; fi
fi

# This will download and compile the ipfs-update go program and install ipfs 
echo "Installing IPFS and supporting packages. More patience is required..."
apt-get -y install git ufw tmux
apt -y autoremove
runuser -l ipfs -c 'go get -u github.com/ipfs/ipfs-update'
runuser -l ipfs -c 'ipfs-update install latest'
runuser -l ipfs -c 'ipfs init > ~/.ipfs/init.log 2>&1'   # Initialize IPFS and log output
echo ""
if [ $WAIT == 1 ]; then read -n 1 -p "Press ^C to exit, any other key to proceed..." key; fi

echo "Opening required firewall ports..."
ufw allow 4001/tcp
ufw allow 22/tcp
echo ""
if [ $WAIT == 1 ]; then read -n 1 -p "Press ^C to exit, any other key to proceed..." key; fi

echo "Setting maximum IPFS storage to $STORAGE_MAX in config file..."
sed -i "s/^\s*\"StorageMax.*$/    ~StorageMax~: ~$STORAGE_MAX~,/g" $CONFIG
sed -i "s/~/\"/g" $CONFIG
echo ""
if [ $WAIT == 1 ]; then read -n 1 -p "Press ^C to exit, any other key to proceed..." key; fi

echo "Creating SystemD unit to start IPFS on reboot..."
(
cat <<SYSD_UNIT
[Unit]
Description=IPFS daemon
After=network.target
[Service]
User=ipfs
LimitNOFILE=65536
Environment="IPFS_FD_MAX=4096"
Environment="IPFS_PATH=/home/ipfs/.ipfs"
ExecStart=/home/ipfs/go/bin/ipfs daemon --enable-namesys-pubsub
Restart=on-failure
[Install]
WantedBy=multi-user.target
SYSD_UNIT
) > /etc/systemd/system/ipfs.service

systemctl enable ipfs
systemctl start ipfs

echo "IPFS is now installed on this system."
